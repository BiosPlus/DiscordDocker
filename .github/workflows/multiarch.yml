name: Docker Build Images (MultiArch)
on:
  push:
  schedule:
    - cron: '0 0 * * 2'
jobs:
  NodeJS_Build_Test:
    name: NodeJS_Build_Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14]
    steps:
    - 
      name: Display job name
      run: echo NodeJS_Build_Test_${{ matrix.node-version }}
      shell: bash
    - 
      name: Checkout
      uses: actions/checkout@v2
    - 
      name: Install + Setup PNPM
      uses: pnpm/action-setup@v1.2.1
      with:
        version: 5
        run_install: true
    - 
      name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: pnpm run build --if-present
    - run: node main.js
      env:
        #Discord required variables
        DISCORD_COMMAND_PREFIX: ${{ secrets.DISCORD_COMMAND_PREFIX }}
        DISCORD_AUTH_TOKEN: ${{ secrets.DISCORD_AUTH_TOKEN }}
        #Github Build Variables
        DISCORD_BUILD_CHANNEL: ${{ secrets.DISCORD_BUILD_CHANNEL }}
        CURRENT_ENVIRONMENT: BUILD
  Build_Push:
    name: Build Push
    needs: NodeJS_Build_Test
    runs-on: ubuntu-latest
    steps:
    -
      name: Checkout
      uses: actions/checkout@v2 
    - 
      name: Prepare
      id: prepare
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo ::set-output name=tag::${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/master ]]; then
          echo ::set-output name=tag::latest
        else
          echo ::set-output name=tag::${GITHUB_REF#refs/heads/}
        fi
        if [[ $GITHUB_REF == refs/tags/*-beta ]]; then
          echo ::set-output name=branch::beta
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          echo ::set-output name=branch::master
        else
          echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
        fi

        echo ::set-output name=commit::${GITHUB_SHA}
        echo ::set-output name=build_date::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
        echo ::set-output name=docker_platforms::linux/amd64
        echo ::set-output name=docker_image::${{ secrets.DOCKER_USERNAME }}/discorddocker
    -
      name: Set up QEMU
      id: qemu-setup
      uses: docker/setup-qemu-action@v1
    -
      name: Install Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    -
      name: Cache Docker Layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - 
      name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}
    -
      name: Avilable Platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    -
      name: Login to DockerHub Container Registry
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_ACCESS_TOKEN }}
    -
      name: Login to Github Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.ACTION_TOKEN }}
    - 
      name: Docker Build
      id: docker_build_test
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: ${{ steps.prepare.outputs.docker_platforms }}
        push: true
        build-args: |
            TAG=${{ steps.prepare.outputs.tag }}
            BRANCH=${{ steps.prepare.outputs.branch }}
            COMMIT=${{ steps.prepare.outputs.commit }}
            BUILD_DATE=${{ steps.prepare.outputs.build_date }}
        tags: |
            ${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.tag }}
            ghcr.io/${{ steps.prepare.outputs.docker_image }}:${{ steps.prepare.outputs.tag }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache